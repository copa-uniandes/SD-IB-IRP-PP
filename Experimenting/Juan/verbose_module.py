from time import process_time
import gurobipy as gu

mmm = gu.Model()
del mmm

class complete_progress():
    @staticmethod
    def print_iteration_head(exclude_MIP=False):
        if not exclude_MIP:
            print('*'*50 + "  pIRP environment  "+'*'*50,flush = True)
            print(f'{"-"*8}|-- Purchasing -|{"-"*43} Routing {"-"*43}')
            print(f'{"-"*8}| Stochastic RH |       NN \t|       RCL \t|       HGA \t|       HGS*\t|       MIP\t|     CG')
            print('t t(s)\t| cost \treal c.\t| Obj \t #Veh \t| Obj \t #Veh \t| Obj \t #Veh \t| Obj \t #Veh \t| Obj \t #Veh \t| Obj \t #Veh \t')
            print('-'*120)
        else:
            print('*'*46 + "  pIRP environment  "+'*'*46,flush=True)
            print(f'{"-"*8}|-- Purchasing -|{"-"*39} Routing {"-"*39}')
            print(f'{"-"*8}| Stochastic RH |       NN \t|       RCL \t|       HGA \t|       HGS*\t| \t   CG\t \t|')
            print('t t(s)\t| cost \treal c.\t| #Veh \t Obj \t| #Veh \t Obj \t| #Veh \t Obj \t| #Veh \t Obj \t| t(s)\t  #Veh \t Obj \t| ')
            print('-'*112)

    @staticmethod
    def print_step(t,start):
        time = round(process_time()-start,2)
        if t+1 < 10:
            if time < 10:
                string = f'{t+1} {round(process_time()-start,2)}\t|'
                print(string,end='\r')
            elif time < 100:
                string = f'{t+1} {round(process_time()-start,2)} |' 
                print(string,end='\r')
            else:
                string = f'{t+1} {round(process_time()-start,1)} |'
                print(string,end='\r')
        else:
            if time < 10:
                string = f'{t+1} {round(process_time()-start,2)}\t|'
                print(string,end='\r')
            elif time < 100:
                string = f'{t+1} {round(process_time()-start,2)} |' 
                print(string,end='\r')
            else:
                string = f'{t+1} {round(process_time()-start)} |'
                print(string,end='\r')
        
        return string

    @staticmethod
    def print_purchase_update(string,prices,purchase):
        cost = sum(purchase[i,k]*prices[i,k] for (i,k) in purchase.keys())
        string += f'{round(cost)}\t{round(cost)}\t|'
        print(string,end='\r')
        return string

    @staticmethod
    def print_routing_update(string,FO,veh,end=False,CG_time=None):
        if CG_time != None:
            if CG_time < 1000:
                string += f' {round(CG_time,1)}\t{round(FO)} \t  {veh}\t'
            else:
                string += f' {round(CG_time)}\t{round(FO)} \t  {veh}\t'
        elif FO < 10000:
            string += f' {round(FO)} \t  {veh}\t'
        else:
            string += f' {round(FO)}\t  {veh}\t'
        string += '|'

        if not end:
            print(string,end='\r')
        else:
            print(string)
        return string
 

class routing_progress():

    @staticmethod
    def print_iteration_head(policies:list,show_gap=False):
        assert not ('CG' not in policies and show_gap), 'Gap can only be computed with exact solution'
        num = len(policies)
        if show_gap: item = 'gap'
        else:   item = 'Obj'

        print(f'***{"*"*num*11}  pIRP environment  {"*"*num*11}**',flush = True)
        print(f'---{"-"*num*12} Routing {"-"*num*12}-----')
        string1 = '--------|-------|'
        string2 = 't t(s)\t|   N\t|'
        for strategy in policies:
            if strategy == 'CG':
                string1 += f'\t  {strategy} \t \t|'
                string2 += f' t(s)\t #Veh \t obj \t|'
            else:
                string1 += f'\t  {strategy} \t \t|'
                string2 += f' t(s)\t #Veh \t {item} \t|'

        print(string1)
        print(string2)
        print(f'-----------------{"-"*num*24}')
    
    @staticmethod
    def print_step(t,start,purchase):
        num_suppliers = len(set(key[0] for key in purchase.keys() if purchase[key]>0))
        time = round(process_time()-start,2)
        if t+1 < 10:
            if time < 10:
                string = f'{t+1} {round(process_time()-start,2)}\t|   {num_suppliers}\t|'
                print(string,end='\r')
            elif time < 100:
                string = f'{t+1} {round(process_time()-start,2):.2f} |   {num_suppliers}\t|' 
                print(string,end='\r')
            elif time < 1000:
                string = f'{t+1} {round(process_time()-start,1):.1f} |   {num_suppliers}\t|'
                print(string,end='\r')
            else:
                string = f'{t+1} {round(process_time()-start):.0f} |   {num_suppliers}\t|'
                print(string,end='\r')
        else:
            if time < 10:
                string = f'{t+1} {round(process_time()-start,2)}\t|   {num_suppliers}\t|'
                print(string,end='\r')
            elif time < 100:
                string = f'{t+1} {round(process_time()-start,2):.2f} |   {num_suppliers}\t|' 
                print(string,end='\r')
            elif time < 1000:
                string = f'{t+1} {round(process_time()-start):.1f} |   {num_suppliers}\t|'
                print(string,end='\r')
            else:
                string = f'{t+1} {round(process_time()-start):.0f} |   {num_suppliers}\t|'
                print(string,end='\r')
        
        return string

    @staticmethod
    def print_routing_update(string,time,vehicles,objective,end=False,CG_obj=None):
        if CG_obj==None:
            if time < 1000:
                string += f' {round(time,1)}\t  {round(vehicles,1)} \t {round(objective)}\t|'
            else:
                string += f' {round(time)}\t  {round(vehicles,1)} \t {round(objective)}\t|'
        else:
            gap = round((objective-CG_obj)/CG_obj,4)
            if time < 1000:
                string += f' {round(time,1)}\t  {round(vehicles,1)} \t {round(gap*100,2)}\t|'
            else:
                string += f' {round(time)}\t  {round(vehicles,1)} \t {round(gap*100,2)}\t|'

        if not end:
            print(string,end='\r')
        else:
            print(string)
        return string


class routing_instances():

    @staticmethod
    def print_head(policies:list,inst_set:str,show_gap:bool):
        if show_gap: item = 'gap'
        else: item = 'Obj' 
        num = len(policies)

        print(f'*****************{"*"*num*13}  {inst_set} set Instances  {"*"*num*13}*****************',flush = True)
        string1 = f'--------|{"-"*23}|'
        string2 = 'Inst\t|   M \t  Veh\t Obj\t|'
        for strategy in policies:
            if strategy not in  ['RCL']:
                string1 += f'\t  {strategy} \t \t|'
                string2 += f' t(s)\t #Veh \t {item} \t|'
            else:
                string1 += f'\t  \t  \t \t{strategy} \t \t \t|'
                string2 += f' t(s)\t #Veh \t mean \tmedian\t stdev\t min\t max\t|'
                
        print(string1)
        print(string2)
        print(f'--------------------------------------------------------{"-"*num*28}')


        # print(f'{"-"*8}|\tBKS \t|\t   NN \t \t|\t   RCL \t \t|\t   HGA \t \t|\t  HGS*')# \t \t|\t   CG \t \t')
        # print(f'Inst\t| #Veh \t Obj \t| t(s)\t #Veh \t {item} \t| t(s) \t #Veh \t{item} \t| t(s) \t #Veh \t {item} \t| t(s) \t #Veh \t {item} \t|')# \t| t(s) \t #Veh \t{ item}')
        # print('-'*118)

    @staticmethod
    def print_inst(set,instance,M,k,bks):
        if set == 'Li':
            string = f'Li {instance[-6:-4]} \t|  {M}\t  {k} \t{round(bks)} \t|'
        elif set == 'Golden':
            string = f'Go {instance[-5:-4]} \t|  {M}\t  {k} \t{round(bks)} \t|'
        elif set == 'Uchoa':
            string = f'{instance[2:-4]}|  {M}\t  {k} \t{round(bks)} \t|' 
        else:
            string = f'{instance}|  {M}\t  {k} \t{round(bks)} \t|' 
        print(string,end='\r')
        return string
    
    @staticmethod
    def print_routing_update(string,obj,veh,t,show_gap,benchmark,intervals=False,end=False):
        if t < 10: tt = round(t,2)
        elif t < 100: tt = round(t,1)
        else: tt = round(t)

        if type(veh) != int:
            veh = round(veh,1)
        if not show_gap:
            if tt <10: 
                string += f' {tt:.2f}\t   {veh}\t {round(obj,1)}\t|'
            else:
                string += f' {tt:.1f}\t   {veh}\t {round(obj,1)}\t|'
        else:
            gap = round((obj-benchmark[0])/benchmark[0],4) * 100; gap = round(gap,2)

            if intervals == False:
                if tt < 10:
                    string += f' {tt:.2f}\t  {veh}\t {gap}\t|'
                else:
                    string += f' {tt:.1f}\t  {veh}\t {gap}\t|'
            else:
                median = round((intervals[0]-benchmark[0])/benchmark[0],4) * 100; median = round(median,2)
                stdev = round(intervals[1]/benchmark[0],4) * 100; stdev = round(stdev,2)
                min_gap = round((intervals[2]-benchmark[0])/benchmark[0],4) * 100; min_gap = round(min_gap,2)
                max_gap = round((intervals[3]-benchmark[0])/benchmark[0],4) * 100; max_gap = round(max_gap,2)
                if tt < 10:
                    string += f' {tt:.2f}\t  {veh}\t {gap}\t {median} \t{stdev}\t  {min_gap}\t {max_gap}\t|'
                else:
                    string += f' {tt:.1f}\t  {veh}\t {gap}\t {median} \t{stdev}\t  {min_gap}\t {max_gap}\t|'
            
        
        
        if not end:
            print(string,end='\r')
        else:
            print(string)
        
        return string
    
    @staticmethod
    def print_comparison_head(policies:list,inst_set:str,show_gap:bool):
        if show_gap: item = 'gap'
        else: item = 'Obj' 
        num = len(policies)

        print(f'**{"*"*num*13}  {inst_set} set Instances  {"*"*num*13}***',flush = True)
        string1 = f'----------------|'
        string2 = 'Sizes\t  Num \t|'
        for strategy in policies:
            if strategy not in ['RCL']:
                string1 += f'\t{strategy} \t|'
                string2 += f' t(s) \t   {item} \t|'
            else:
                string1 += f'\t     {strategy} \t \t|'
                string2 += f' t(s)\t  mean\t  min\t   max\t|'
                
        print(string1)
        print(string2)
        print(f'---------{"-"*num*28}')


    @staticmethod
    def print_comparison_inst(sizes,num_instances):

        if num_instances>1:
            string = f'{sizes[0]}-{sizes[1]}\t    {num_instances}\t|' 
        else:
            string = f'> {sizes[0]}\t    {num_instances}\t|' 
        print(string,end='\r')
        return string
    
    @staticmethod
    def print_routing_comparison_update(string,nn_gap,nn_time,RCL_gap,RCL_time,RCL_min,RCL_max,GA_time,GA_gap):
        string += f' {nn_time:.2f}\t  {round(nn_gap*100,2)}\t| {RCL_time:.2f}\t  {round(RCL_gap*100,2)}\t  {round(RCL_min*100,2)}\t {round(RCL_max*100,2)}\t| {GA_time:.2f}\t {round(GA_gap*100,2)}\t|'        
        print(string)
        
        return string


class CG_initialization():
    @staticmethod
    def print_head(experiment,replica):
        print('*'*89 + f"  Heuristic Init on CG - Exp{experiment}/Replica{replica} "+'*'*88,flush = True)
        print(f'{"-"*8}|\tNN\t|\t  \tCG \t \t|\t  CG w/ Init (alpha = 0.1) \t|\t  CG w/ Init (alpha = 0.2) \t|\t  CG w/ Init (alpha = 0.4) \t|\t  CG w/ Init (alpha = 0.6) \t|')
        print(f't   M\t| #Veh\t  Obj\t| t(s)\t cols\t #Veh \t Obj \t| t(s)\tRCLcols\t cols\t #Veh \t Obj \t| t(s)\tRCLcols\t cols\t #Veh \t Obj \t| t(s)\tRCLcols\t cols\t #Veh \t Obj \t| t(s)\tRCLcols\t cols\t #Veh \t Obj \t|')
        print('-'*216)

    @staticmethod
    def print_step(t,purchase,nn_veh,nn_obj,):
        num_suppliers = len(set(key[0] for key in purchase.keys() if purchase[key]>0))
        if t < 10:
            string = f'{t}   {num_suppliers}\t| {nn_veh}\t {nn_obj}\t|'
        else:
            string = f'{t}  {num_suppliers}\t| {nn_veh}\t {nn_obj}\t|'
        print(string,end='\r')
        return string
    
    @staticmethod
    def print_update(string,t,cols,veh,obj,end=False):
        if type(cols) == int:
            if t < 100:
                string += f' {t:.2f}\t  {cols}\t {veh}\t{round(obj,1)}\t|'
            elif t < 1000:
                string += f' {t:.1f}\t  {cols}\t {veh}\t{round(obj,1)}\t|'
            else:
                string += f' {t:.0f}\t  {cols}\t {veh}\t{round(obj,1)}\t|'
            if end:
                print(string)
                return string
            else:
                print(string,end='\r')
                return string
        else:
            if t < 100:
                string += f' {t:.2f}\t  {cols[0]}\t  {cols[1]}\t {veh}\t{round(obj,1)}\t|'
            elif t < 1000:
                string += f' {t:.1f}\t  {cols[0]}\t  {cols[1]}\t {veh}\t{round(obj,1)}\t|'
            else:
                string += f' {t:.0f}\t  {cols[0]}\t  {cols[1]}\t {veh}\t{round(obj,1)}\t|'
            if end:
                print(string)
                return string
            else:
                print(string,end='\r')
                return string
        


















# ********************************************************  Li set Instances  ********************************************************
# --------|-----------------------|	  NN 	 	|	  	  	 	RCL 	 	 	|	  GA 	 	|
# Inst	|   M 	  Veh	 Obj	| t(s)	 #Veh 	 gap 	| t(s)	 #Veh 	 mean 	median	 stdev	 min	 max	| t(s)	 #Veh 	 gap 	|
# --------------------------------------------------------------------------------------------------------------------------------------------
# Li 21 	|  560	  10 	16213 	| 0.03	  13	 28.0	| 0.16	  14.8	 46.63	 35.18 	27.38	  24.5	 130.31	| 3.05 & 13 & 28.0	|
# Li 22 	|  600	  15 	14499 	| 0.00	  22	 31.72	| 0.09	  24.3	 47.54	 42.62 	11.58	  36.62	 74.5	| 3.20 & 22 & 31.72	|
# Li 23 	|  640	  10 	18801 	| 0.00	  14	 41.85	| 0.13	  13.8	 43.66	 32.81 	30.65	  20.93	 151.15	| 3.08 & 14 & 41.85	|
# Li 24 	|  720	  10 	21389 	| 0.06	  13	 30.59	| 0.16	  14.8	 49.19	 35.24 	34.23	  26.75	 168.69	| 3.30 & 13 & 30.59	|
# Li 25 	|  760	  19 	16666 	| 0.05	  28	 31.56	| 0.16	  30.1	 40.96	 39.63 	7.12	  31.74	 68.16	| 3.14 & 28 & 31.56	|
# Li 26 	|  800	  10 	23978 	| 0.03	  14	 27.61	| 0.20	  16.1	 55.42	 36.09 	39.46	  25.56	 183.53	| 3.34 & 14 & 27.61	|
# Li 27 	|  840	  20 	17320 	| 0.05	  29	 26.82	| 0.22	  32.1	 44.38	 37.0 	18.0	  32.04	 114.97	| 3.23 & 29 & 26.82	|
# Li 28 	|  880	  10 	26566 	| 0.08	  14	 29.18	| 0.26	  15.0	 42.83	 32.27 	37.65	  20.99	 203.73	| 3.35 & 14 & 29.18	|
# Li 29 	|  960	  10 	29154 	| 0.11	  14	 32.12	| 0.31	  15.6	 49.14	 33.56 	43.6	  22.12	 219.43	| 3.19 & 14 & 32.12	|
# Li 30 	|  1040	  10 	31743 	| 0.06	  14	 30.07	| 0.58	  15.8	 46.86	 34.71 	34.98	  26.8	 140.76	| 3.28 & 14 & 30.07	|
# Li 31 	|  1120	  10 	34331 	| 0.17	  13	 24.0	| 0.84	  17.4	 66.06	 37.74 	66.12	  24.8	 242.71	| 3.50 & 13 & 24.0	|
# Li 32 	|  1200	  11 	37159 	| 0.16	  12	 9.44	| 1.30	  17.4	 58.52	 36.39 	53.03	  25.6	 244.79	| 3.95 & 12 & 9.44	|


# ********************************************************  Golden set Instances  ********************************************************
# --------|-----------------------|	  NN 	 	|	  	  	 	RCL 	 	 	|	  GA 	 	|
# Inst	|   M 	  Veh	 Obj	| t(s)	 #Veh 	 gap 	| t(s)	 #Veh 	 mean 	median	 stdev	 min	 max	| t(s)	 #Veh 	 gap 	|
# --------------------------------------------------------------------------------------------------------------------------------------------
# Go 1 	|  240	  9 	5623 	| 0.00	  14	 32.18	| 0.03	  13.9	 35.84	 33.82 	8.86	  27.02	 68.95	| 3.01 & 14 & 32.18	|
# Go 2 	|  320	  10 	8405 	| 0.02	  15	 33.93	| 0.03	  15.4	 41.52	 36.38 	14.85	  28.49	 87.19	| 3.06 & 15 & 33.93	|
# Go 3 	|  400	  9 	10998 	| 0.00	  15	 39.93	| 0.05	  15.1	 47.81	 36.8 	19.74	  30.95	 102.04	| 3.05 & 15 & 39.93	|
# Go 4 	|  480	  10 	13589 	| 0.02	  13	 31.83	| 0.07	  13.3	 33.77	 30.16 	11.18	  23.46	 76.41	| 3.08 & 13 & 31.83	|
# Go 5 	|  200	  5 	6461 	| 0.00	  6	    49.44	| 0.02	  6.0	 38.1	 34.54 	12.36	  19.36	 89.29	| 15.7 & 5 & 29.56	|
# Go 6 	|  280	  7 	8400 	| 0.00	  8	    22.97	| 0.02	  8.8	 36.53	 30.53 	20.45	  19.46	 102.42	| 3.03 & 8 & 22.97	|
# Go 7 	|  360	  8 	10103 	| 0.00	  11	 23.5	| 0.03	  12.3	 36.55	 34.12 	9.18	  24.52	 70.28	| 3.06 & 11 & 23.5	|
# Go 8 	|  440	  10 	11635 	| 0.00	  15	 34.25	| 0.05	  16.5	 51.46	 40.47 	22.54	  30.52	 103.99	| 3.10 & 15 & 34.25	|



********************************************************  Uchoa set Instances  ********************************************************
--------|-----------------------|	  NN 	 	|	  	  	 	RCL 	 	 	|	  GA 	 	|
Inst	|   M 	  Veh	 Obj	| t(s)	 #Veh 	 gap 	| t(s)	 #Veh 	 mean 	median	 stdev	 min	 max	| t(s)	 #Veh 	 gap 	|
--------------------------------------------------------------------------------------------------------------------------------------------
n101-k25|  100	  25 	27591 	| 0.00	  26	 52.02	| 0.00	  26.5	 46.94	 45.9 	6.63	  29.12	 61.94	| 4.08	  26	 28.36	|
n106-k14|  105	  14 	26362 	| 0.00	  14	 9.61	| 0.00	  14.0	 11.92	 9.77 	5.61	  7.54	 27.1	| 5.00	  14	 8.34	|
n110-k13|  109	  13 	14971 	| 0.00	  13	 28.86	| 0.00	  13.0	 45.0	 30.62 	30.31	  20.71	 133.36	| 4.06	  13	 16.51	|
n115-k10|  114	  10 	12747 	| 0.00	  10	 51.64	| 0.00	  10.2	 73.3	 55.39 	38.07	  39.24	 174.46	| 8.91	  10	 32.96	|
n120-k6|  119	  6 	13332 	| 0.00	   6	 19.18	| 0.01	  6.0	 28.75	 22.56 	18.99	  17.33	 97.97	| 3.02	   6	 19.18	|
n125-k30|  124	  30 	55539 	| 0.00	  32	 23.07	| 0.00	  32.0	 26.53	 25.0 	3.91	  22.32	 36.97	| 6.69	  31	 16.62	|
n129-k18|  128	  18 	28940 	| 0.00	  18	 24.24	| 0.01	  18.0	 30.02	 27.24 	9.77	  20.99	 68.26	| 3.84	  18	 20.32	|
n134-k13|  133	  13 	10916 	| 0.00	  13	 51.39	| 0.01	  13.0	 69.87	 59.75 	25.45	  40.48	 124.73	| 10.4	  13	 34.84	|
n139-k10|  138	  10 	13590 	| 0.00	  10	 23.95	| 0.01	  10.1	 47.48	 34.01 	43.29	  19.13	 186.45	| 8.31	  10	 23.02	|
n143-k7|  142	  7 	15700 	| 0.00	   7	 43.52	| 0.01	  7.0	 58.2	 45.46 	30.25	  38.1	 169.29	| 11.0	   7	 38.62	|
n148-k46|  147	  46 	43448 	| 0.00	  47	 30.42	| 0.01	  47.3	 36.29	 33.74 	7.75	  27.0	 59.52	| 7.02	  47	 23.97	|
n153-k22|  152	  22 	21220 	| 0.00	  25	 42.13	| 0.01	  24.9	 60.98	 56.89 	13.79	  45.97	 107.74	| 3.03	  25	 42.13	|
n157-k13|  156	  13 	16876 	| 0.00	  13	 10.83	| 0.01	  13.0	 17.62	 12.83 	12.36	  6.85	 59.11	| 3.02	  13	 10.83	|
n162-k11|  161	  11 	14138 	| 0.00	  11	 26.53	| 0.01	  11.0	 56.02	 40.26 	50.3	  18.26	 198.26	| 3.02	  11	 26.53	|
n167-k10|  166	  10 	20557 	| 0.00	  10	 23.47	| 0.02	  10.0	 58.15	 31.95 	47.92	  20.6	 162.48	| 3.02	  10	 23.47	|
n172-k51|  171	  51 	45607 	| 0.00	  52	 42.47	| 0.01	  52.2	 47.08	 45.73 	6.21	  40.14	 73.46	| 17.8	  52	 37.44	|
n176-k26|  175	  26 	47812 	| 0.00	  29	 38.81	| 0.02	  28.9	 42.85	 40.12 	7.91	  33.09	 70.74	| 3.69	  28	 29.9	|
n181-k23|  180	  23 	25569 	| 0.00	  23	 8.4	| 0.01	  23.0	 18.15	 11.63 	15.72	  6.74	 70.59	| 3.05	  23	 8.4	|
n186-k15|  185	  15 	24145 	| 0.00	  15	 21.16	| 0.01	  15.0	 44.97	 25.32 	36.6	  19.15	 140.0	| 3.05	  15	 21.16	|
n190-k8|  189	  8 	16980 	| 0.00	   8	 17.7	| 0.01	  8.0	 31.17	 22.75 	21.23	  17.89	 113.53	| 3.02	   8	 17.7	|
n195-k51|  194	  51 	44225 	| 0.00	  53	 47.02	| 0.02	  52.4	 44.96	 41.16 	10.64	  35.62	 77.16	| 15.9	  52	 34.87	|
n200-k36|  199	  36 	58578 	| 0.00	  38	 18.12	| 0.02	  37.4	 21.36	 17.93 	7.85	  10.7	 40.95	| 17.1	  37	 12.58	|
n204-k19|  203	  19 	19565 	| 0.00	  19	 22.32	| 0.02	  19.0	 54.06	 30.53 	48.42	  19.6	 177.05	| 3.05	  19	 22.32	|
n209-k16|  208	  16 	30656 	| 0.00	  16	 15.33	| 0.01	  16.0	 24.06	 17.67 	20.97	  14.27	 120.43	| 3.05	  16	 15.33	|
n214-k11|  213	  11 	10856 	| 0.01	  12	 36.73	| 0.02	  11.3	 57.59	 41.44 	36.18	  25.3	 140.89	| 3.02	  12	 36.73	|
n219-k73|  218	  73 	117595 	| 0.00	  73	 2.16	| 0.02	  73.0	 4.25	 2.27 	5.09	  2.04	 25.19	| 3.02	  73	 2.16	|
n223-k34|  222	  34 	40437 	| 0.01	  34	 31.71	| 0.02	  34.0	 45.43	 33.98 	21.58	  27.03	 95.05	| 17.9	  34	 25.75	|
n228-k23|  227	  23 	25742 	| 0.01	  24	 46.78	| 0.01	  23.9	 57.08	 51.28 	19.08	  35.96	 140.06	| 36.3	  23	 41.66	|
n233-k16|  232	  16 	19230 	| 0.01	  17	 50.16	| 0.02	  17.0	 99.93	 67.3 	60.87	  46.67	 237.52	| 3.02	  17	 50.16	|
n237-k14|  236	  14 	27042 	| 0.01	  14	 18.46	| 0.02	  14.0	 52.32	 24.86 	42.34	  19.13	 164.48	| 3.03	  14	 18.46	|
n242-k48|  241	  48 	82751 	| 0.01	  48	 15.41	| 0.03	  48.0	 27.63	 18.83 	14.55	  15.21	 52.35	| 32.1	  48	 15.34	|
n247-k50|  246	  47 	37274 	| 0.01	  54	 40.95	| 0.02	  54.4	 43.83	 41.32 	 7.8	  38.92	 80.76	| 9.41	  54	 35.69	|
n251-k28|  250	  28 	38684 	| 0.01	  28	 10.63	| 0.02	  28.0	 26.69	 18.64 	21.75	  10.45	 96.99	| 3.02	  28	 10.63	|
n256-k16|  255	  16 	18839 	| 0.01	  17	 21.68	| 0.03	  17.0	 52.35	 28.34 	44.6	  20.97	 143.6	| 3.03	  17	 21.68	|
n261-k13|  260	  13 	26558 	| 0.01	  13	 43.38	| 0.02	  13.0	 71.44	 50.36 	47.52	  32.31	 197.06	| 17.5	  13	 41.89	|
n266-k58|  265	  58 	75478 	| 0.01	  60	 8.97	| 0.02	  60.4	 15.84	 11.01 	11.58	  7.96	 56.0	| 3.05	  60	 8.97	|
n270-k35|  269	  35 	35291 	| 0.01	  37	 19.01	| 0.03	  36.7	 25.89	 24.08 	9.49	  15.39	 68.98	| 3.03	  37	 19.01	|
n275-k28|  274	  28 	21245 	| 0.01	  28	 13.22	| 0.02	  28.0	 26.0	 15.88 	24.6	  12.0	 126.73	| 3.06	  28	 13.22	|
n280-k17|  279	  17 	33503 	| 0.01	  17	 32.78	| 0.03	  17.5	 53.25	 43.6 	28.63	  33.06	 165.77	| 3.05	  17	 32.78	|
n284-k15|  283	  15 	20215 	| 0.01	  15	 31.18	| 0.02	  15.0	 68.27	 38.69 	62.46	  22.48	 202.5	| 3.02	  15	 31.18	|
n289-k60|  288	  60 	95151 	| 0.01	  62	 22.38	| 0.03	  62.3	 32.05	 28.05 	9.86	  22.53	 56.45	| 16.4	  62	 21.33	|
n294-k50|  293	  50 	47161 	| 0.01	  51	 48.03	| 0.04	  51.0	 51.15	 46.46 	11.77	  39.34	 78.65	| 32.4	  51	 36.92	|
n298-k31|  297	  31 	34231 	| 0.01	  31	 45.46	| 0.04	  31.0	 51.85	 35.78 	33.81	  29.34	 170.74	| 130.0	  31	 30.73	|
n303-k21|  302	  21 	21736 	| 0.01	  21	 44.0	| 0.03	  21.0	 79.83	 58.91 	53.09	  39.33	 225.35	| 3.05	  21	 44.0	|
n308-k13|  307	  13 	25859 	| 0.01	  13	 37.05	| 0.03	  13.0	 71.89	 40.02 	59.65	  31.01	 225.51	| 3.06	  13	 37.05	|
n313-k71|  312	  71 	94043 	| 0.01	  73	 35.64	| 0.03	  72.9	 35.8	 34.61 	4.63	  30.96	 48.66	| 145.0	  73	 27.75	|
n317-k53|  316	  53 	78355 	| 0.01	  53	 3.6	| 0.03	  53.0	 9.45	 4.14 	10.72	  3.45	 42.38	| 3.09	  53	 3.6	|
n322-k28|  321	  28 	29834 	| 0.01	  29	 30.56	| 0.04	  29.0	 37.78	 28.58 	26.91	  22.15	 119.29	| 3.03	  29	 30.56	|
n327-k20|  326	  20 	27532 	| 0.01	  20	 21.15	| 0.03	  20.0	 43.22	 39.3 	33.05	  19.62	 128.73	| 3.05	  20	 21.15	|
n331-k15|  330	  15 	31102 	| 0.01	  15	 16.91	| 0.05	  15.0	 40.91	 34.66 	31.1	  18.16	 121.32	| 3.03	  15	 16.91	|
n336-k84|  335	  84 	139111 	| 0.01	  87	 25.31	| 0.03	  87.7	 28.97	 27.85 	4.61	  24.26	 46.63	| 19.5	  87	 23.52	|
n344-k43|  343	  43 	42050 	| 0.02	  44	 17.26	| 0.04	  44.1	 31.88	 26.51 	21.74	  13.8	 85.03	| 3.06	  44	 17.26	|
n351-k40|  350	  40 	25896 	| 0.01	  40	 45.0	| 0.03	  40.4	 72.37	 57.7 	41.21	  35.64	 173.09	| 3.06	  40	 45.0	|
n359-k29|  358	  29 	51505 	| 0.01	  29	 19.59	| 0.05	  29.0	 32.05	 20.74 	21.88	  14.89	 79.7	| 3.09	  29	 19.59	|
n367-k17|  366	  17 	22814 	| 0.01	  17	 31.78	| 0.04	  17.0	 45.46	 34.81 	32.48	  23.96	 210.34	| 3.03	  17	 31.78	|
n376-k94|  375	  94 	147713 	| 0.01	  94	 2.02	| 0.06	  94.0	 4.56	 2.73 	6.17	  2.09	 36.86	| 3.02	  94	 2.02	|
n384-k52|  383	  52 	65928 	| 0.02	  54	 12.8	| 0.04	  54.0	 23.67	 14.25 	22.48	  10.76	 108.2	| 3.05	  54	 12.8	|
n393-k38|  392	  38 	38260 	| 0.02	  39	 19.06	| 0.05	  39.0	 40.74	 22.89 	37.77	  17.37	 171.92	| 95.7	  39	 19.02	|
n401-k29|  400	  29 	66154 	| 0.02	  30	 16.14	| 0.05	  29.9	 26.73	 18.71 	18.42	  9.14	 70.71	| 27.9	  29	 13.57	|
n411-k19|  410	  19 	19712 	| 0.02	  19	 44.94	| 0.05	  19.0	 87.08	 50.64 	72.91	  38.01	 293.67	| 3.02	  19	 44.94	|
n420-k130|  419	  130 	107798 	| 0.02	  133	 28.21	| 0.06	  132.7	 28.4	 27.59 	4.89	  21.94	 47.34	| 29.8	  132	 22.9	|
n429-k61|  428	  61 	65449 	| 0.03	  63	 11.47	| 0.06	  62.9	 23.22	 14.16 	18.95	  11.33	 66.69	| 3.06	  63	 11.47	|
n439-k37|  438	  37 	36391 	| 0.02	  37	 13.36	| 0.08	  37.0	 29.77	 17.64 	30.13	  14.32	 121.32	| 3.03	  37	 13.36	|
n449-k29|  448	  29 	55233 	| 0.02	  29	 33.83	| 0.06	  29.1	 51.39	 35.19 	30.87	  28.04	 147.35	| 3.11	  29	 33.83	|
n459-k26|  458	  26 	24139 	| 0.02	  26	 30.48	| 0.09	  26.0	 51.3	 35.25 	39.0	  25.73	 171.68	| 3.02	  26	 30.48	|
n469-k138|  468	  138 	221824 	| 0.04	  149	 8.37	| 0.08	  148.9	 11.5	 9.22 	5.02	  7.18	 23.29	| 90.3	  147	 8.28	|
n480-k70|  479	  70 	89449 	| 0.04	  72	 9.57	| 0.08	  72.0	 18.89	 13.09 	17.59	  8.41	 78.99	| 3.14	  72	 9.57	|
n491-k59|  490	  59 	66483 	| 0.03	  59	 42.6	| 0.07	  59.0	 62.53	 50.11 	26.46	  36.34	 131.91	| 111.0	  59	 41.85	|
n502-k39|  501	  39 	69226 	| 0.04	  39	 4.17	| 0.09	  39.0	 19.75	 13.78 	20.6	  4.51	 73.47	| 3.08	  39	 4.17	|
n513-k21|  512	  21 	24201 	| 0.03	  21	 33.0	| 0.08	  21.0	 88.8	 56.44 	77.43	  29.44	 250.93	| 3.09	  21	 33.0	|
n524-k153|  523	  153 	154593 	| 0.03	  160	 41.1	| 0.09	  160.8	 46.06	 42.3 	8.55	  40.06	 70.43	| 117.0	  160	 39.87	|
n536-k96|  535	  96 	94846 	| 0.04	  98	 35.83	| 0.10	  98.0	 41.9	 39.43 	 9.7	  32.33	 78.98	| 3.03	  98	 35.83	|
n548-k50|  547	  50 	86700 	| 0.04	  50	 6.8	| 0.10	  50.0	 21.99	 7.8 	28.97	  6.63	 110.28	| 3.11	  50	 6.8	|
n561-k42|  560	  42 	42717 	| 0.03	  42	 38.24	| 0.11	  42.0	 64.52	 35.48 	57.45	  29.16	 252.44	| 3.03	  42	 38.24	|
n573-k30|  572	  30 	50673 	| 0.04	  30	 14.38	| 0.12	  30.0	 33.53	 23.91 	31.51	  12.82	 130.15	| 3.09	  30	 14.38	|
n586-k159|  585	  159 	190316 	| 0.05	  169	 8.26	| 0.13	  168.4	 11.64	 8.72 	7.41	  7.3	 45.18	| 3.11	  169	 8.26	|
n599-k92|  598	  92 	108451 	| 0.05	  96	 10.38	| 0.16	  96.0	 22.19	 18.06 	15.35	  9.23	 56.7	| 3.08	  96	 10.38	|
n613-k62|  612	  62 	59535 	| 0.05	  62	 48.96	| 0.14	  62.0	 74.96	 50.93 	48.5	  43.87	 202.84	| 3.11	  62	 48.96	|
n627-k43|  626	  43 	62164 	| 0.04	  44	 11.0	| 0.14	  44.0	 22.1	 14.18 	15.09	  11.56	 90.08	| 3.08	  44	 11.0	|
n641-k35|  640	  35 	63682 	| 0.05	  35	 11.42	| 0.20	  35.0	 52.59	 22.38 	54.83	  12.0	 178.64	| 3.06	  35	 11.42	|
n655-k131|  654	  131 	106780 	| 0.05	  131	 2.97	| 0.15	  131.0	 14.12	 11.32 	16.04	  2.95	 61.21	| 3.14	  131	 2.97	|
n670-k130|  669	  130 	146332 	| 0.07	  140	 41.65	| 0.16	  141.0	 51.0	 46.53 	12.09	  41.55	 94.71	| 3.02	  140	 41.65	|
n685-k75|  684	  75 	68205 	| 0.06	  75	 49.04	| 0.17	  75.5	 91.5	 58.1 	52.83	  41.24	 178.13	| 197.0	  75	 48.51	|
n701-k44|  700	  44 	81923 	| 0.06	  44	 14.2	| 0.16	  44.0	 39.55	 20.85 	39.47	  13.23	 149.82	| 3.08	  44	 14.2	|
n716-k35|  715	  35 	43373 	| 0.07	  35	 40.58	| 0.21	  35.0	 86.26	 53.5 	63.37	  32.63	 212.23	| 3.03	  35	 40.58	|
n733-k159|  732	  159 	136187 	| 0.07	  160	 23.48	| 0.18	  160.4	 31.66	 25.83 	16.98	  19.37	 91.1	| 3.16	  160	 23.48	|
n749-k98|  748	  98 	77269 	| 0.09	  98	 39.52	| 0.20	  98.2	 61.52	 48.46 	29.61	  38.62	 129.22	| 3.14	  98	 39.52	|
n766-k71|  765	  71 	114417 	| 0.09	  71	 25.47	| 0.21	  71.2	 43.9	 29.29 	35.1	  23.88	 138.36	| 3.19	  71	 25.47	|
n783-k48|  782	  48 	72386 	| 0.09	  48	 36.69	| 0.22	  48.0	 58.6	 43.91 	31.95	  36.24	 140.81	| 3.03	  48	 36.69	|
n801-k40|  800	  40 	73305 	| 0.09	  40	 9.96	| 0.28	  40.0	 28.91	 12.46 	44.01	  10.93	 212.93	| 3.05	  40	 9.96	|
n819-k171|  818	  171 	158121 	| 0.12	  180	 9.6	| 0.33	  180.1	 21.38	 11.52 	16.51	  8.85	 64.06	| 3.08	  180	 9.6	|
n837-k142|  836	  142 	193737 	| 0.12	  147	 6.53	| 0.28	  146.8	 14.5	 7.84 	14.26	  6.9	 66.28	| 3.09	  147	 6.53	|
n856-k95|  855	  95 	88965 	| 0.11	  95	 6.92	| 0.32	  95.0	 27.44	 19.44 	30.51	  8.04	 150.1	| 3.38	  95	 6.92	|
n876-k59|  875	  59 	99299 	| 0.12	  59	 25.38	| 0.37	  59.0	 53.35	 36.41 	41.57	  20.7	 142.09	| 3.08	  59	 25.38	|
n895-k37|  894	  37 	53860 	| 0.14	  38	 19.1	| 0.31	  38.0	 125.05	 55.16 	120.92	  20.49	 350.48	| 3.16	  38	 19.1	|
n916-k207|  915	  207 	329179 	| 0.16	  217	 6.29	| 0.42	  216.6	 13.52	 7.21 	11.79	  5.74	 44.44	| 3.28	  217	 6.29	|
n936-k151|  935	  151 	132715 	| 0.15	  167	 45.68	| 0.33	  168.0	 68.22	 53.01 	34.58	  43.36	 141.22	| 3.12	  167	 45.68	|
n957-k87|  956	  87 	85465 	| 0.14	  87	 8.03	| 0.39	  87.0	 41.62	 26.16 	51.35	  9.5	 193.34	| 3.09	  87	 8.03	|
n979-k58|  978	  58 	118976 	| 0.16	  59	 21.26	| 0.35	  59.0	 23.23	 20.69 	4.82	  17.71	 32.19	| 3.36	  59	 21.26	|
n1001-k43| 1000	  43 	72355 	| 0.16	  43	 19.54	| 0.45	  43.0	 81.78	 45.63 	90.1	  19.78	 273.3	| 3.27	  43	 19.54	|
RCL average gap: 43.25




*****************************************  Uchoa set Instances  ******************************************
----------------|	NN 	|	     RCL 	 	|	GA 	|
Sizes	  Num 	| t(s) 	   gap 	| t(s)	  mean	  min	   max	| t(s) 	   gap 	|
---------------------------------------------------------------------------------------------
100-199	    21	| 0.01	  30.31	| 0.00	  34.19	  25.06	 105.39	| 26.18	 24.53	|
200-299	    22	| 0.03	  27.04	| 0.00	  31.29	  22.76	 119.92	| 69.78	 24.75	|
300-399	    15	| 0.04	  24.11	| 0.00	  29.85	  20.5	 121.53	| 59.31	 23.47	|
400-499	    10	| 0.05	  23.9	| 0.01	  27.16	  20.04	 115.3	| 55.51	 23.02	|
500-599	    9	| 0.07	  21.35	| 0.01	  27.32	  19.05	 118.73	| 28.36	 21.21	|
600-699	    6	| 0.06	  27.51	| 0.03	  33.91	  25.53	 134.27	| 42.46	 27.42	|
700-799	    6	| 0.09	  29.99	| 0.03	  36.97	  27.33	 143.59	| 3.73	 29.99	|
800-899	    6	| 0.14	  12.91	| 0.05	  23.8	  12.65	 164.32	| 3.77	 12.91	|
900-999	    4	| 0.12	  20.32	| 0.09	  26.77	  19.08	 102.8	| 2.57	 20.32	|
> 1000	    1	| 0.03	  19.54	| 0.45	  45.63	  19.78	 273.3	| 0.65	 19.54	|



y = [52.029.6128.8651.6419.1823.0724.2451.3923.9543.5230.4242.1310.8326.5323.4742.4738.818.421.1617.747.0218.1222.3215.3336.732.1631.7146.7850.1618.4615.4140.9510.6321.6843.388.9719.0113.2232.7831.1822.3848.0345.4644.037.0535.643.630.5621.1516.9125.3117.2645.019.5931.782.0212.819.0616.1444.9428.2111.4713.3633.8330.488.379.5742.64.1733.041.135.836.838.2414.388.2610.3848.9611.011.422.9741.6549.0414.240.5823.4839.5225.4736.699.969.66.536.9225.3819.16.2945.688.0321.2619.54]

x = [45.9,9.77,30.62,55.39,22.56,25.0,27.24,59.75,34.01,45.46,33.74,56.89,12.83,40.26,31.95,45.73,40.12,11.63,25.32,22.75,41.16,17.93,30.53,17.67,41.44,2.27,33.98,51.28,67.3,24.86,18.83,41.32,18.64,28.34,50.36,11.01,24.08,15.88,43.6,38.69,28.05,46.46,35.78,58.91,40.02,34.61,4.14,28.58,39.3,34.66,27.85,26.51,57.7,20.74,34.81,2.73,14.25,22.89,18.71,50.64,27.59,14.16,17.64,35.19,35.25,9.22,13.09,50.11,13.78,56.44,42.3,39.43,7.8,35.48,23.91,8.72,18.06,50.93,14.18,22.38,11.32,46.53,58.1,20.85,53.5,25.83,48.46,29.29,43.91,12.46,11.52,7.84,19.44,36.41,55.16,7.21,53.01,26.16,20.69,45.63]

w = [28.36,8.34,16.51,32.96,19.18,16.62,20.32,34.84,23.02,38.62,23.97,42.13,10.83,26.53,23.47,37.44,29.9,8.4,21.16,17.7,34.87,12.58,22.32,15.33,36.73,2.16,25.75,41.66,50.16,18.46,15.34,35.69,10.63,21.68,41.89,8.97,19.01,13.22,32.78,31.18,21.33,36.92,30.73,44.0,37.05,27.75,3.6,30.56,21.15,16.91,23.52,17.26,45.0,19.59,31.78,2.02,12.8,19.02,13.57,44.94,22.9,11.47,13.36,33.83,30.48,8.28,9.57,41.85,4.17,33.0,39.87,35.83,6.8,38.24,14.38,8.26,10.38,48.96,11.0,11.42,2.97,41.65,48.51,14.2,40.58,23.48,39.52,25.47,36.69,9.96,9.6,6.53,6.92,25.38,19.1,6.29,45.68,8.03,21.26,19.54]